votic[dd[i,1],dd[i,2]]=0
for (i in 1:5) as.numeric(votic[,i])->votic[,i]
as.matrix(votic)%*%valori /sum(valori)->votocompitiB1
casaB1=cbind(voticasaB1[elenco,1:3],votocompitiB1,votocompitiB1*6/10)
casaB=casaB1
###rielaborazione compiti a casa
mean(casaB1[,4])
mean(casaA[,4])
max(casaB1[,4])
sd(casaA[,4])
sd(casaB1[,4])
quantile(casaB1[,4])
quantile(casaA[,4])
par(mfrow=c(1,3))
hist(casaB1[,4])
hist(casaA[,4])
compiti=c(unique(casaA[,3]),unique(casaB1[,3]))
voticompiti2016=data.frame(compiti,rep(0,length(compiti)),rep(0,length(compiti)),rep(0,length(compiti)))
for (s in 1:nrow(casaA))
{k=which(compiti==casaA[s,3])
voticompiti2016[k,2:4]=casaA[s,c(1,2,4)]}
for (s in 1:nrow(casaB))
{k=which(compiti==casaB[s,3])
voticompiti2016[k,2:4]=casaB[s,c(1,2,4)]}
voticompiti2016[,4]=voticompiti2016[,4]*6/10
data=voticompiti2016
voti=data.frame(data,matrix(numeric(0),nrow=nrow(data),ncol=6))
esameA=as.numeric(voticasaA[,17])
temp=which(is.na(esameA))
todrop=which(is.na(esameA))
toleave=which(!is.na(esameA))
esamA=100*esameA[-temp]/44
formula<-function(x)  60+(x-60)*1.15
formula(esamA)*0.8*30/100->votoA
for(p in 1:length(toleave))
{s=which(data[,1]==voticasaA[toleave[p],3])
voti[s,5] =votoA[p]
voti[s,9] =voti[s,5]+voti[s,4]
}
esameB1=as.numeric(voticasaB1[,19])
temp=which(is.na(esameB1))
toleave=which(!is.na(esameB1))
esamB1=100*esameB1[-temp]/30
x1=quantile(esamB1,seq(0,1,b=.1))
x0=quantile(esamA,seq(0,1,b=.1))
coeff=coefficients(lm(x1~x0))
a=coeff[2]
b=coeff[1]
a=0.9927617
b=-5.018824
formulainversa=function(esamB1,a,b)   esamB1/a- b/a
x0=formulainversa(esamB1,a,b)
formula<-function(x)  60+(x-60)*1.07
formula(x0)*0.8*30/100->votoB1
for(p in 1:length(toleave))
{s=which(voti[,1]==voticasaB1[toleave[p],3])
voti[s,6] =votoB1[p]
voti[s,9] =voti[s,6]+voti[s,4]
}
esameB2=as.numeric(voticasaB2[,17])
temp=which(is.na(esameB2))
toleave=which(!is.na(esameB2))
esamB2=100*esameB2[-temp]/30
x2=quantile(esamB2,seq(0,1,b=.1))
x0=quantile(esamA,seq(0,1,b=.1))
coeff=coefficients(lm(x2~x0))
a=coeff[2]
b=coeff[1]
a= 0.8569994
b=  -12.1982
formulainversa=function(esamB2,a,b)   esamB2/a- b/a
x0=formulainversa(esamB2,a,b)
formula<-function(x)  60+(x-60)*1.05
formula(x0)*0.8*30/100->votoB2
for(p in 1:length(toleave))
{s=which(voti[,1]==voticasaB2[toleave[p],3])
voti[s,7] =votoB2[p]
voti[s,9] =voti[s,7]+voti[s,4]
}
esameC=as.numeric(voti15j)/44*30
esamC=100*esameC/30
x2=quantile(esamC,seq(0,1,b=.1))
x0=quantile(esamA,seq(0,1,b=.1))
coeff=coefficients(lm(x2~x0))
a=coeff[2]
b=coeff[1]
a= 0.8529517
b=   -7.605723
formulainversa=function(esamC,a,b)   esamC/a- b/a
x0=formulainversa(esamC,a,b)
#formula<-function(x)  60+(x-60)*1.05
formula<-function(x)  60+(x-45)*40/45
formula<-function(x)  60+(x-45)*40/40
formula(esamC)*0.8*30/100->votoCs
for(p in 1:length(esameC))
{
s=which(voti[,1]==dati15_2016[p,'Codice.identificativo'])
voti[s,8] =votoCs[p]
voti[s,10] =voti[s,8]+voti[s,4]
}
esameC=as.numeric(voti15j)/44*30
write.csv2(voti15_01_2016,file="voti15012016.csv")
library(devtools)
library(roxygen2)
load_all()
document()
temp=sceltarange(b,-a,a,0)
ftex=paste("\\\\sin(",paste(temp[1:2],c("","x"),collapse="+",sep=""),")")
library(devtools)
library(roxygen2)
load_all()
document()
library(TEST)
funzioneCasuale("sin",3,2)
library(devtools)
library(roxygen2)
load_all()
document()
library(TEST)
funzioneCasuale("sin",3,2)
funzioneCasuale("sin",3,2.finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)
library(devtools)
library(roxygen2)
load_all()
document()
library(devtools)
library(roxygen2)
load_all()
document()
library(devtools)
library(roxygen2)
load_all()
document()
library(devtools)
library(roxygen2)
load_all()
document()
library(TEST)
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
load_all()
document()
library(TEST)
library(TEST)
library(TEST)
library("roxygen2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
devtools::load_all(".")
document()
library(EsamiR)
availableMethods()
funzioneCasuale(tipo, a = 9, b = 2, finito = F, bignumber = 10^8,
smallnumber = 10^-4)
funzioneCasuale("sin",3,2)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)@fR
funzioneCasuale("sin",3,2,finito=T)@dominio
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
document()
library(EsamiR)
funzioneCasuale("sin",3,2)
funzioneCasuale("sin",3,2)->x
plot(x)
x
x@fR
funzioneCasuale("sin",3,2,finito=T)->x
plot(x)
curve(x@fR,x@dominio,main="grafico")
x@fR
curve(x@fR)
plot(x@fR)
devtools::load_all(".")
library(EsamiR)
funzioneCasuale("sin",3,2,finito=T)->x
plot(x)
plot(x)
x
grafico(x)
getR(x)
getR(x)
x
library(devtools)
library(roxygen2)
load_all()
document()
library(EsamiR)
library(devtools)
library(roxygen2)
load_all()
document()
library(EsamiR)
funzioneCasuale("sin",3,2)
funzioneCasuale("sin",3,2,finito=T)
funzioneCasuale("sin",3,2,finito=T)->x
z
x
plot(X)
plot(x)
curve(x@fR, x@dominio[1],x@dominio[2] ,...)
curve(x@fR, x@dominio[1],x@dominio[2] )
x
x@fR
class(x@fR)
curve(x@fR)
getR(x)
class(x)
x@fR
curve(x@fR)
curve((x@fR),0,1)
f=x@fR
f
curve(f,0,1)
show(f)
getTex(x)
library(EsamiR)
getTex(x)
library(devtools)
library(roxygen2)
load_all()
document()
library(EsamiR)
getR(funzioneCasuale("sin",3,2))
curve(getR(funzioneCasuale("sin",3,2)))
getR(funzioneCasuale("sin",3,2))
gettext(funzioneCasuale("sin",3,2))
class(getR(funzioneCasuale("sin",3,2)))
f=getR(funzioneCasuale("sin",3,2))
f
curve(f)
curve(function(x) 3*x)
f
body(f)
curve(body(f))
curve(f)
curve(f,0,3)
devtools::load_all(".")
library(EsamiR)
f=funzioneCasuale("sin",3,2)
f
f=funzioneCasuale("sin",3,2,finito=T)
plot(f)
f
grafico(f)
devtools::load_all(".")
library(EsamiR)
f=funzioneCasuale("sin",3,2,finito=T)
f
grafico(f)
library(EsamiR)
devtools::load_all(".")
devtools::load_all(".")
library(EsamiR)
grafic
f=funzioneCasuale("sin",3,2,finito=T)
grafico(f)
plot(f)
?plot
load_all()
load_all()
load_all()
load_all()
load_all()
library(EsamiR)
funzioneCasuale("sin",3,2)
funzioneCasuale("sin",3,2)->x
x
x@fR
plot(x)
curve(g<-x@fR)
g=x@fR
curve(g)
load_all()
load_all()
funzioneCasuale("sin",3,2)->x
plot(x)
x
load_all()
funzioneCasuale("sin",3,2,finito=T)->x
plot(x)
library(devtools)
library(roxygen2)
load_all()
document()
library(EsamiR)
library(EsamiR)
install.packages("~/Documents/github/Rbook/EsamiR_0.1.tgz", repos = NULL, type = .Platform$pkgType)
set.seed(25)
prob<-c(1/6,1/6,1/6,1/6,1/5,1/6)
dado<-sample(1:6,1200,replace=T,p=prob)
table(dado)
library(devtools)
library(roxygen2)
load_all()
document()
mean(dado)
set.seed(25)
prob<-c(0.16,0.16,0.16,0.16,1/5,0.16)
dado<-sample(1:6,1200,replace=T,p=prob)
table(dado)
mean(dado)
x=c(1,2,3,5)
y=c(2.5,18.6,51.8,209)
X=log(x)
Y=log(y)
a=lm(Y~X)$coefficients[2]
b=lm(Y~X)$coefficients[1]
a
b
exp(b)
exp(b)
library(exams)
odir <- tempfile()
odir="../matematicaxml"
#set.seed(1090)
setwd("~/Dropbox/Exams_R_package/Matematica")
getwd()
setwd("validateMate")
setwd("../FUNZIONI")
setwd("Rmatematica")
esercizi=dir()###
esercizi
exams2moodle(esercizi , n = 10, dir = odir,converter="tth",name="2febbraioR",rule="false",points=2)
setwd("valideStat")
require(exams)
library(tth)
library(base64enc)
set.seed(1190)
getwd()
odir="../statisticaxml"
setwd("~/Dropbox/Exams_R_package/statistica")
setwd("valideStat")
esame=dir()
exams2moodle(esame, n =4, dir = odir,converter="tth",name="ExamStat",points=4)
warnings()
library(exams)
odir <- tempfile()
odir="../matematicaxml"
#set.seed(1090)
setwd("~/Dropbox/Exams_R_package/Matematica")
getwd()
setwd("validateMate")
setwd("../FUNZIONI")
setwd("../Derivate")
exams2moodle("rettatangente.Rnw", n =10,dir=odir,converter="tth",name="rettatangente",points=4,rule="false")
dir()
setwd("../Derivate")
getwd()
setwd("Derivate")
exams2moodle("rettatangente.Rnw", n =10,dir=odir,converter="tth",name="rettatangente",points=4,rule="false")
temp1=c("sin","cos","exp","log","tan","atan","asin","acos")
n1=length(temp1)
temp2=c("x^","^x")
n2=length(temp2)
fe1=sample(1:(n1-2),1)
fe2=sample(1:2,1)
coefficienti=sample(2:10,2,replace=TRUE)
a=sample(2:10,2)
x=sample(1:10,1)/10
h=sample(1:10,1)/100
fun1=paste(temp1[fe1],"(",a[1],"*x)",sep="",collapse="+")
fun1
## DATA GENERATION
temp1=c("sin","cos","exp","log","tan","atan","asin","acos")
n1=length(temp1)
temp2=c("x^","^x")
n2=length(temp2)
fe1=sample(1:(n1-2),1)
fe2=sample(1:2,1)
coefficienti=sample(2:10,2,replace=TRUE)
a=sample(2:10,2)
x=sample(1:10,1)/10
h=sample(1:10,1)/100
fun1=paste(temp1[fe1],"(",a[1],"*x)",sep="",collapse="+")
fun1
if(fe2==1) {fun2=paste(temp2[fe2],"(",a[fe2],")",sep="",collapse="+")} else {fun2=paste(a[fe2],temp2[fe2],sep="",collapse="+")}
fun=paste(fun1,fun2,sep="+",collapse="+")
f<-function(x) eval(parse(text=fun))
derivata=D(parse(text=fun),"x")
pendenza= eval(derivata)
pendenza
intercetta= f(x) -pendenza*x
## QUESTION/SOLUTION
questions <- solutions <- explanations <- rep(list(""), 2)
type <- rep(list("schoice"), 2)
questions[[1]] <- ""
solutions[[1]] <- explanations[[1]] <- round(pendenza,digits=3)
type[[1]] <- "num"
questions[[2]] <- ""
solutions[[2]] <- explanations[[2]] <- round(intercetta,digits=3)
type[[2]] <- "num"
explanations[1:2] <-solutions[1:2]
gsub("\\*","",fun) ->funz
funz
fun
fun2
temp2
fe2
if(fe2==1) {fun2=paste(temp2[fe2],"{",a[fe2],"}",sep="",collapse="+")} else {fun2=paste(a[fe2],temp2[fe2],sep="",collapse="+")}
fun=paste(fun1,fun2,sep="+",collapse="+")
f<-function(x) eval(parse(text=fun))
derivata=D(parse(text=fun),"x")
a[fe2]
if(fe2==1) {fun2=paste(temp2[fe2],a[fe2],sep="",collapse="+")} else {fun2=paste(a[fe2],temp2[fe2],sep="",collapse="+")}
fun=paste(fun1,fun2,sep="+",collapse="+")
f<-function(x) eval(parse(text=fun))
derivata=D(parse(text=fun),"x")
funz
gsub("\\*","",fun) ->funz
funz
exams2moodle("rettatangente.Rnw", n =10,dir=odir,converter="tth",name="rettatangente",points=4,rule="false")
temp1=c("sin","cos","exp","log","tan","atan","asin","acos")
n1=length(temp1)
temp2=c("x^","^x")
n2=length(temp2)
fe1=sample(1:(n1-2),1)
fe2=sample(1:2,1)
coefficienti=sample(2:9,2,replace=TRUE)
a=sample(2:9,2)
a
fe1=sample(1:(n1-2),1)
fe2=sample(1:2,1)
coefficienti=sample(2:9,2,replace=TRUE)
a=sample(2:9,2)
x=sample(1:10,1)/10
h=sample(1:10,1)/100
fun1=paste(temp1[fe1],"(",a[1],"*x)",sep="",collapse="+")
fun1
## DATA GENERATION
temp1=c("sin","cos","exp","log","tan","atan","asin","acos")
n1=length(temp1)
temp2=c("x^","^x")
n2=length(temp2)
fe1=sample(1:(n1-2),1)
fe2=sample(1:2,1)
coefficienti=sample(2:9,2,replace=TRUE)
a=sample(2:9,2)
x=sample(1:10,1)/10
h=sample(1:10,1)/100
fun1=paste(temp1[fe1],"(",a[1],"*x)",sep="",collapse="+")
fun1
if(fe2==1) {fun2=paste(temp2[fe2],a[2],sep="",collapse="+")} else {fun2=paste(a[2],temp2[fe2],sep="",collapse="+")}
fun=paste(fun1,fun2,sep="+",collapse="+")
f<-function(x) eval(parse(text=fun))
derivata=D(parse(text=fun),"x")
pendenza= eval(derivata)
pendenza
intercetta= f(x) -pendenza*x
## QUESTION/SOLUTION
questions <- solutions <- explanations <- rep(list(""), 2)
type <- rep(list("schoice"), 2)
questions[[1]] <- ""
solutions[[1]] <- explanations[[1]] <- round(pendenza,digits=3)
type[[1]] <- "num"
questions[[2]] <- ""
solutions[[2]] <- explanations[[2]] <- round(intercetta,digits=3)
type[[2]] <- "num"
explanations[1:2] <-solutions[1:2]
gsub("\\*","",fun) ->funz
funz
exams2moodle("rettatangente.Rnw", n =10,dir=odir,converter="tth",name="rettatangente",points=4,rule="false")
klog(0.\9)
log(0.19)
exp(0.19)
log(10,e)
log(10,exp(1))
*0.19
log(10,exp(1))*0.19
log(10,exp(1))*0.1984
log(1.85)
x=generaHyp(finito=TRUE)
generaHyp<-function(a=9,b=2,finito=FALSE,xmax=10) {
fr<-function(x) 0
domain=c(-xmax,xmax)
x=0
while(x==0) {
sceltarange(4,-a,a,0)->temp;x=temp[1]*temp[4]-temp[2]*temp[3]}
ftex=paste("\\\\frac{",paste(temp[1:2],c("","x"),collapse="+",sep=""),"}{",paste(temp[3:4],c("","x"),collapse="+",sep=""),"}",sep="")#### (a x+b)/(c x+d)
fr1=paste("(",paste(temp[1:2],c("1","x"),collapse="+",sep="*"),")/(",paste(temp[3:4],c("1","x"),collapse="+",sep="*"),")",sep="")
body(fr)= parse(text=fr1)
environment(fr)<-globalenv()
if (finito==TRUE)
domain=sample(list(c(-xmax,-temp[3]/temp[4]),c( -temp[3]/temp[4],xmax)),1)[[1]] else
domain=c(-Inf,-temp[3]/temp[4], -temp[3]/temp[4],xmax)
return(nuovaFunzione(fr,ftex,domain))
}
x=generaHyp(finito=TRUE)
library("EsamiR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
x=generaHyp(finito=TRUE)
x
plot(x)
class(x)
g<-x@fR
d<-x@dominio
curve(g,d[1],d[2])
devtools::load_all("~/Documents/github/Rbook/EsamiR")
document()
